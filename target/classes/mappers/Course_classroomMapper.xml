<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cims.dao.Course_classroomMapper">
  <resultMap id="BaseResultMap" type="com.cims.entity.Course_classroom">
    <constructor>
      <idArg column="course_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="classroom_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="create_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="update_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
    </constructor>
  </resultMap>
  <sql id="Base_Column_List">
    course_id, classroom_id, create_time, update_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from course_classroom
    where course_id = #{courseId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from course_classroom
    where course_id = #{courseId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.cims.entity.Course_classroom">
    insert into course_classroom (course_id, classroom_id, create_time, 
      update_time)
    values (#{courseId,jdbcType=INTEGER}, #{classroomId,jdbcType=INTEGER},NOW(),
      #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.cims.entity.Course_classroom">
    insert into course_classroom
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="courseId != null">
        course_id,
      </if>
      <if test="classroomId != null">
        classroom_id,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="courseId != null">
        #{courseId,jdbcType=INTEGER},
      </if>
      <if test="classroomId != null">
        #{classroomId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.cims.entity.Course_classroom">
    update course_classroom
    <set>
      <if test="classroomId != null">
        classroom_id = #{classroomId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where course_id = #{courseId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.cims.entity.Course_classroom">
    update course_classroom
    set classroom_id = #{classroomId,jdbcType=INTEGER},
      update_time = NOW()
    where course_id = #{courseId,jdbcType=INTEGER}
  </update>

  <select id="selectByMap" parameterType="Map" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from `course_classroom`
    where 1=1
    <if test="keyword != null and keyword.trim() != ''">
      and `course_id` LIKE CONCAT(CONCAT('%', #{keyword}), '%')
    </if>
    ORDER BY create_time DESC
  </select>

  <select id="selectByCourseId" parameterType="java.lang.Integer" resultType="java.lang.Integer">
      select COUNT(course_id)
      from `course_classroom`
      where course_id = #{courseId,jdbcType=INTEGER}
  </select>
</mapper>